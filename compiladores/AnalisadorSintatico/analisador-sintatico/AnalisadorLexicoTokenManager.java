/* AnalisadorLexicoTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. AnalisadorLexicoTokenManager.java */
import org.example.AnalisadorLexicoConstants;
import java.util.*;
import java.io.*;

/** Token Manager. */
@SuppressWarnings ("unused")
public class AnalisadorLexicoTokenManager implements AnalisadorLexicoConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x200000000L) != 0L)
            return 66;
         if ((active0 & 0xa080L) != 0L)
         {
            jjmatchedKind = 46;
            return 2;
         }
         if ((active0 & 0x65e7eL) != 0L)
         {
            jjmatchedKind = 46;
            return 74;
         }
         if ((active0 & 0x10100L) != 0L)
         {
            jjmatchedKind = 46;
            return 6;
         }
         return -1;
      case 1:
         if ((active0 & 0x66ffeL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return 74;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return 5;
         }
         if ((active0 & 0x1000L) != 0L)
            return 74;
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return 1;
         }
         return -1;
      case 2:
         if ((active0 & 0x66dceL) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 2;
            return 74;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 2;
            return 75;
         }
         if ((active0 & 0x230L) != 0L)
            return 74;
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 2;
            return 4;
         }
         return -1;
      case 3:
         if ((active0 & 0x4000eL) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 3;
            return 74;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 3;
            return 75;
         }
         if ((active0 & 0x2edc0L) != 0L)
            return 74;
         return -1;
      case 4:
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 4;
            return 74;
         }
         if ((active0 & 0x5000aL) != 0L)
            return 74;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 37:
         jjmatchedKind = 35;
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 38:
         return jjStopAtPos(0, 43);
      case 40:
         return jjStopAtPos(0, 24);
      case 41:
         return jjStopAtPos(0, 25);
      case 42:
         jjmatchedKind = 32;
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 43:
         return jjStopAtPos(0, 30);
      case 44:
         return jjStopAtPos(0, 23);
      case 45:
         return jjStopAtPos(0, 31);
      case 46:
         return jjStopAtPos(0, 20);
      case 47:
         return jjStartNfaWithStates_0(0, 33, 66);
      case 58:
         return jjStopAtPos(0, 21);
      case 59:
         return jjStopAtPos(0, 22);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x28000000000L);
      case 61:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 62:
         return jjMoveStringLiteralDfa1_0(0x50000000000L);
      case 91:
         return jjStopAtPos(0, 26);
      case 93:
         return jjStopAtPos(0, 27);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x2L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x4L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x4010L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x10100L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x440L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0xa08L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0xa080L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 123:
         return jjStopAtPos(0, 28);
      case 124:
         return jjStopAtPos(0, 44);
      case 125:
         return jjStopAtPos(0, 29);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 37:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         break;
      case 42:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         break;
      case 60:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L);
      case 61:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         break;
      case 62:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x6c6L);
      case 70:
      case 102:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(1, 12, 74);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x42800L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x4100L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x10L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x8L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(2, 39);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(2, 40);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x548L);
      case 68:
      case 100:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 4, 74);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x4L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x2L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 77:
      case 109:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 5, 74);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x20800L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 84:
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 74);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 74);
         break;
      case 69:
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 74);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 74);
         break;
      case 71:
      case 103:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 74);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x6L);
      case 76:
      case 108:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 6, 74);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 78:
      case 110:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 74);
         break;
      case 80:
      case 112:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 74);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x8L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 84:
      case 116:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 74);
         break;
      case 87:
      case 119:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 74);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 74);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 74);
         break;
      case 78:
      case 110:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 1, 74);
         return jjMoveStringLiteralDfa5_0(active0, 0x4L);
      case 84:
      case 116:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 3, 74);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 2, 74);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 74;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(15); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(11, 12); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     { jjCheckNAdd(10); }
                  }
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(15); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(11, 12); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     { jjCheckNAdd(10); }
                  }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(15); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(11, 12); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     { jjCheckNAdd(10); }
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(15); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(11, 12); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     { jjCheckNAdd(10); }
                  }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     { jjCheckNAddStates(0, 10); }
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     { jjCheckNAdd(8); }
                  }
                  else if (curChar == 47)
                     { jjAddStates(11, 13); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(14, 18); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(19, 23); }
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(15); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(11, 12); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     { jjCheckNAdd(10); }
                  }
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(15); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(11, 12); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     { jjCheckNAdd(10); }
                  }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(15); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(11, 12); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     { jjCheckNAdd(10); }
                  }
                  break;
               case 66:
                  if (curChar == 42)
                  {
                     if (kind > 60)
                        kind = 60;
                     { jjCheckNAdd(73); }
                  }
                  else if (curChar == 47)
                  {
                     if (kind > 55)
                        kind = 55;
                     { jjCheckNAdd(67); }
                  }
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(69, 71); }
                  break;
               case 8:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAdd(8); }
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAdd(10); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(11, 12); }
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L && kind > 59)
                     kind = 59;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(15); }
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAdd(16); }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddStates(0, 10); }
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAdd(18); }
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 20:
                  if (curChar == 46)
                     { jjCheckNAdd(21); }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  { jjCheckNAdd(21); }
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(24); }
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(25, 26); }
                  break;
               case 26:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(27, 28); }
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(27, 28); }
                  break;
               case 28:
                  if (curChar == 46)
                     { jjCheckNAdd(29); }
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddTwoStates(28, 29); }
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(33); }
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(33, 34); }
                  break;
               case 34:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(37); }
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAdd(37); }
                  break;
               case 38:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(41); }
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAdd(41); }
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(45); }
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  break;
               case 46:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAdd(49); }
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(38); }
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(51, 38); }
                  break;
               case 53:
                  if (curChar == 34)
                     { jjCheckNAddStates(19, 23); }
                  break;
               case 54:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(54, 55); }
                  break;
               case 55:
                  if (curChar == 34 && kind > 49)
                     kind = 49;
                  break;
               case 56:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(27, 29); }
                  break;
               case 57:
                  if ((0x2400L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 58:
                  if (curChar == 10 && kind > 61)
                     kind = 61;
                  break;
               case 59:
               case 64:
                  if (curChar == 13)
                     { jjCheckNAdd(58); }
                  break;
               case 60:
                  if (curChar == 39)
                     { jjCheckNAddStates(14, 18); }
                  break;
               case 61:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(61, 62); }
                  break;
               case 62:
                  if (curChar == 39 && kind > 49)
                     kind = 49;
                  break;
               case 63:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAddStates(30, 32); }
                  break;
               case 65:
                  if (curChar == 47)
                     { jjAddStates(11, 13); }
                  break;
               case 67:
                  if ((0xffffffff00000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  { jjCheckNAdd(67); }
                  break;
               case 68:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(69, 71); }
                  break;
               case 69:
                  if ((0xffffffff00000400L & l) != 0L)
                     { jjCheckNAddTwoStates(69, 71); }
                  break;
               case 70:
                  if (curChar == 47 && kind > 56)
                     kind = 56;
                  break;
               case 71:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar != 42)
                     break;
                  if (kind > 60)
                     kind = 60;
                  { jjCheckNAdd(73); }
                  break;
               case 73:
                  if (kind > 60)
                     kind = 60;
                  { jjCheckNAdd(73); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(13, 14); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(11, 12); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     { jjCheckNAdd(10); }
                  }
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(0); }
                  break;
               case 74:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(13, 14); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(11, 12); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     { jjCheckNAdd(10); }
                  }
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(13, 14); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(11, 12); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     { jjCheckNAdd(10); }
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(13, 14); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(11, 12); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     { jjCheckNAdd(10); }
                  }
                  if ((0x20000000200000L & l) != 0L)
                     { jjCheckNAdd(0); }
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     { jjCheckNAddStates(33, 37); }
                  }
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 75:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(13, 14); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(11, 12); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     { jjCheckNAdd(10); }
                  }
                  if ((0x2000000020L & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                  }
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(13, 14); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(11, 12); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     { jjCheckNAdd(10); }
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(13, 14); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(11, 12); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     { jjCheckNAdd(10); }
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 0:
                  if ((0x2000000020L & l) != 0L && kind > 50)
                     kind = 50;
                  break;
               case 7:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(33, 37); }
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAdd(10); }
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(11, 12); }
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(13, 14); }
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 49:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 54:
                  { jjAddStates(38, 39); }
                  break;
               case 56:
                  { jjCheckNAddStates(27, 29); }
                  break;
               case 61:
                  { jjAddStates(40, 41); }
                  break;
               case 63:
                  { jjCheckNAddStates(30, 32); }
                  break;
               case 67:
                  if ((0x7fffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if ((0x7fffffffffffffffL & l) != 0L)
                     { jjAddStates(42, 43); }
                  break;
               case 73:
                  if (kind > 60)
                     kind = 60;
                  jjstateSet[jjnewStateCnt++] = 73;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 54:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(38, 39); }
                  break;
               case 56:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(27, 29); }
                  break;
               case 61:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(40, 41); }
                  break;
               case 63:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(30, 32); }
                  break;
               case 67:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(42, 43); }
                  break;
               case 73:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjstateSet[jjnewStateCnt++] = 73;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 74 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\75", "\56", "\72", "\73", "\54", "\50", "\51", 
"\133", "\135", "\173", "\175", "\53", "\55", "\52", "\57", "\52\52", "\45", "\45\45", 
"\75\75", "\41\75", "\74\74\75", "\76\76\75", "\74\74", "\76\76", "\46", "\174", "\41", 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   18, 19, 20, 22, 25, 26, 30, 38, 42, 49, 50, 66, 68, 72, 61, 62, 
   63, 57, 64, 54, 55, 56, 57, 59, 51, 38, 52, 56, 57, 59, 63, 57, 
   64, 10, 11, 12, 13, 14, 54, 55, 61, 62, 69, 71, 
};

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 62)
   {
      jjmatchedKind = 62;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public AnalisadorLexicoTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public AnalisadorLexicoTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 74; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x7e07ffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x1c0000000000000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[74];
    private final int[] jjstateSet = new int[2 * 74];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
