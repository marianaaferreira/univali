/* AnalisadorLexico.java */
/* Generated By:JavaCC: Do not edit this line. AnalisadorLexico.java */
import org.example.AnalisadorLexicoConstants;import java.util.*;
import java.io.*;
public class AnalisadorLexico implements AnalisadorLexicoConstants {
    public static void main(String[] args) {
        try {
            AnalisadorLexico parser = new AnalisadorLexico(System.in);
            parser.programa();
            System.out.println("Programa compilado com sucesso.");
        } catch (ParseException e) {
            System.err.println(e.getMessage());
        } catch (TokenMgrError tme) {
            System.err.println("Erro l\u00e9xico: " + tme.getMessage());
        } catch (Exception ex) {
            System.err.println("Erro inesperado: " + ex.getMessage());
            ex.printStackTrace(System.err);
        }
    }

//sintatico
  final public 
void programa() throws ParseException {
    jj_consume_token(BEGIN);
    opcional_id();
    opcional_def();
    jj_consume_token(START);
    lista_de_comandos();
    jj_consume_token(END);
    jj_consume_token(PONTO);
    jj_consume_token(0);
}

  final public void opcional_id() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
}

  final public void opcional_def() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DEFINE:{
      jj_consume_token(DEFINE);
      lista_declaracao_var();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
}

  final public void tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:{
      jj_consume_token(NUM);
      break;
      }
    case REAL:{
      jj_consume_token(REAL);
      break;
      }
    case TEXT:{
      jj_consume_token(TEXT);
      break;
      }
    case FLAG:{
      jj_consume_token(FLAG);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void valor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CONSTANTE_INTEIRA:{
      jj_consume_token(CONSTANTE_INTEIRA);
      break;
      }
    case CONSTANTE_REAL:{
      jj_consume_token(CONSTANTE_REAL);
      break;
      }
    case CONSTANTE_LITERAL:{
      jj_consume_token(CONSTANTE_LITERAL);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void declaracao_de_variaveis() throws ParseException {
    lista_de_identificadores();
    jj_consume_token(DOIS_PONTOS);
    tipo();
    declaracao_de_variaveis_aux();
}

  final public void declaracao_de_variaveis_aux() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ATRIBUICAO:{
      jj_consume_token(ATRIBUICAO);
      valor();
      jj_consume_token(PONTO_E_VIRGULA);
      break;
      }
    case ABRE_COLCHETES:{
      jj_consume_token(ABRE_COLCHETES);
      jj_consume_token(CONSTANTE_INTEIRA);
      jj_consume_token(FECHA_COLCHETES);
      declaracao_de_variaveis_aux2();
      break;
      }
    case PONTO_E_VIRGULA:{
      jj_consume_token(PONTO_E_VIRGULA);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void declaracao_de_variaveis_aux2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ATRIBUICAO:{
      jj_consume_token(ATRIBUICAO);
      jj_consume_token(ABRE_CHAVES);
      valores();
      jj_consume_token(FECHA_CHAVES);
      jj_consume_token(PONTO_E_VIRGULA);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
}

  final public void lista_declaracao_var() throws ParseException {
    declaracao_de_variaveis();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFICADOR:{
      lista_declaracao_var_aux();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
}

  final public void lista_declaracao_var_aux() throws ParseException {
    lista_declaracao_var();
}

  final public void lista_de_identificadores() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    lista_de_identificadores_aux();
}

  final public void lista_de_identificadores_aux() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VIRGULA:{
      jj_consume_token(VIRGULA);
      lista_de_identificadores();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
}

  final public void valores() throws ParseException {
    valor();
    valores_aux();
}

  final public void valores_aux() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VIRGULA:{
      jj_consume_token(VIRGULA);
      valores();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
}

  final public void lista_de_comandos() throws ParseException {
    comando();
    lista_de_comandos_aux();
}

  final public void lista_de_comandos_aux() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SET:
    case READ:
    case SHOW:
    case IF:
    case LOOP:{
      lista_de_comandos();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
}

  final public void comando() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SET:{
      comando_atribuicao();
      break;
      }
    case SHOW:{
      comando_saida_dados();
      break;
      }
    case LOOP:{
      comando_repeticao();
      break;
      }
    case IF:{
      comando_selecao();
      break;
      }
    case READ:{
      comando_entrada_dados();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void comando_atribuicao() throws ParseException {
    jj_consume_token(SET);
    jj_consume_token(IDENTIFICADOR);
    comando_atribuicao_aux();
}

  final public void comando_atribuicao_aux() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ATRIBUICAO:{
      jj_consume_token(ATRIBUICAO);
      expressao();
      jj_consume_token(PONTO_E_VIRGULA);
      break;
      }
    case ABRE_COLCHETES:{
      jj_consume_token(ABRE_COLCHETES);
      jj_consume_token(CONSTANTE_INTEIRA);
      jj_consume_token(FECHA_COLCHETES);
      jj_consume_token(ATRIBUICAO);
      expressao();
      jj_consume_token(PONTO_E_VIRGULA);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void comando_entrada_dados() throws ParseException {
    jj_consume_token(READ);
    jj_consume_token(ABRE_PARENTESES);
    jj_consume_token(IDENTIFICADOR);
    cmd_dados();
}

  final public void cmd_dados() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FECHA_PARENTESES:{
      jj_consume_token(FECHA_PARENTESES);
      jj_consume_token(PONTO_E_VIRGULA);
      break;
      }
    case ABRE_COLCHETES:{
      jj_consume_token(ABRE_COLCHETES);
      jj_consume_token(CONSTANTE_INTEIRA);
      jj_consume_token(FECHA_COLCHETES);
      jj_consume_token(FECHA_PARENTESES);
      jj_consume_token(PONTO_E_VIRGULA);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void comando_saida_dados() throws ParseException {
    jj_consume_token(SHOW);
    jj_consume_token(ABRE_PARENTESES);
    lista_id_const();
    jj_consume_token(FECHA_PARENTESES);
    jj_consume_token(PONTO_E_VIRGULA);
}

  final public void lista_id_const() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CONSTANTE_INTEIRA:
    case CONSTANTE_REAL:
    case CONSTANTE_LITERAL:{
      valor();
      lista();
      break;
      }
    case IDENTIFICADOR:{
      jj_consume_token(IDENTIFICADOR);
      lista();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void lista() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VIRGULA:{
      jj_consume_token(VIRGULA);
      lista_id_const();
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
}

  final public void comando_selecao() throws ParseException {
    jj_consume_token(IF);
    expressao();
    jj_consume_token(THEN);
    lista_de_comandos();
    cmd_else();
    jj_consume_token(END);
    jj_consume_token(PONTO_E_VIRGULA);
}

  final public void cmd_else() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      lista_de_comandos();
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
}

  final public void comando_repeticao() throws ParseException {
    jj_consume_token(LOOP);
    jj_consume_token(WHILE);
    expressao();
    lista_de_comandos();
    jj_consume_token(END);
    jj_consume_token(PONTO_E_VIRGULA);
}

  final public void expressao() throws ParseException {
    expressao_aux();
}

  final public void expressao_aux() throws ParseException {
    expressao_arit();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IGUAL:
    case DIFERENTE:
    case MENOR_OU_IGUAL:
    case MAIOR_OU_IGUAL:
    case MENOR:
    case MAIOR:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IGUAL:{
        jj_consume_token(IGUAL);
        break;
        }
      case DIFERENTE:{
        jj_consume_token(DIFERENTE);
        break;
        }
      case MENOR:{
        jj_consume_token(MENOR);
        break;
        }
      case MAIOR:{
        jj_consume_token(MAIOR);
        break;
        }
      case MENOR_OU_IGUAL:{
        jj_consume_token(MENOR_OU_IGUAL);
        break;
        }
      case MAIOR_OU_IGUAL:{
        jj_consume_token(MAIOR_OU_IGUAL);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expressao_arit();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
}

  final public void expressao_arit() throws ParseException {
    termo2();
    menor_prioridade();
}

  final public void menor_prioridade() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAIS:
      case MENOS:
      case OU:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAIS:{
        jj_consume_token(MAIS);
        break;
        }
      case MENOS:{
        jj_consume_token(MENOS);
        break;
        }
      case OU:{
        jj_consume_token(OU);
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      termo2();
    }
}

  final public void termo2() throws ParseException {
    termo1();
    media_prioridade();
}

  final public void media_prioridade() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VEZES:
      case DIVIDIR:
      case DIVISAO_INTEIRA:
      case RESTO_DIVISAO:
      case E:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VEZES:{
        jj_consume_token(VEZES);
        break;
        }
      case DIVIDIR:{
        jj_consume_token(DIVIDIR);
        break;
        }
      case DIVISAO_INTEIRA:{
        jj_consume_token(DIVISAO_INTEIRA);
        break;
        }
      case RESTO_DIVISAO:{
        jj_consume_token(RESTO_DIVISAO);
        break;
        }
      case E:{
        jj_consume_token(E);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      termo1();
    }
}

  final public void termo1() throws ParseException {
    elemento();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case POTENCIA:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_3;
      }
      jj_consume_token(POTENCIA);
      elemento();
    }
}

  final public void elemento() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFICADOR:{
      jj_consume_token(IDENTIFICADOR);
      break;
      }
    case CONSTANTE_INTEIRA:{
      jj_consume_token(CONSTANTE_INTEIRA);
      break;
      }
    case CONSTANTE_REAL:{
      jj_consume_token(CONSTANTE_REAL);
      break;
      }
    case CONSTANTE_LITERAL:{
      jj_consume_token(CONSTANTE_LITERAL);
      break;
      }
    case CONSTANTE_LOGICA:{
      jj_consume_token(CONSTANTE_LOGICA);
      break;
      }
    case ABRE_PARENTESES:{
      jj_consume_token(ABRE_PARENTESES);
      expressao();
      jj_consume_token(FECHA_PARENTESES);
      break;
      }
    case NAO:{
      jj_consume_token(NAO);
      jj_consume_token(ABRE_PARENTESES);
      expressao();
      jj_consume_token(FECHA_PARENTESES);
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void skipUntil(int[] syncTokens) throws ParseException {Token t; int k=0;
while (true) {
      t = getToken(1);
      if (t == null || t.kind == 0) {if ("" != null) return;}
      boolean ok = false;
      for (int i=0;i<syncTokens.length;i++) {
        if (t.kind == syncTokens[i]) { ok = true; break; }
      }
      if (ok) {if ("" != null) return;}
      getNextToken();
    }
}

  final public void reportParseError(ParseException e) throws ParseException {
Token tok = e.currentToken.next;
    String found = (tok == null) ? "EOF" : tok.image;
    int line = (tok == null) ? -1 : tok.beginLine;
    int col  = (tok == null) ? -1 : tok.beginColumn;

    StringBuilder expected = new StringBuilder();
    if (e.expectedTokenSequences != null) {
      for (int i = 0; i < e.expectedTokenSequences.length; i++) {
        int[] seq = e.expectedTokenSequences[i];
        if (i>0) expected.append(" | ");
        StringBuilder seqBuf = new StringBuilder();
        for (int j = 0; j < seq.length; j++) {
          seqBuf.append(AnalisadorLexicoConstants.tokenImage[seq[j]]).append(" ");
        }
        expected.append(seqBuf.toString().trim());
      }
    } else {
      expected.append("token v\u00e1lido");
    }

    String msg = "Erro sint\u00e1tico na linha " + line + ", coluna " + col +
                 ": encontrado '" + found + "'. Esperado: " + expected.toString() + ".";
    System.err.println(msg);

    int[] syncTokens = {
      AnalisadorLexicoConstants.PONTO_E_VIRGULA,
      AnalisadorLexicoConstants.END,
      AnalisadorLexicoConstants.PONTO,
    };

    skipUntil(syncTokens);
}

  /** Generated Token Manager. */
  public AnalisadorLexicoTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x4,0x1e0,0x0,0x4480000,0x80000,0x0,0x800000,0x800000,0x21e00,0x21e00,0x4080000,0x6000000,0x0,0x800000,0x4000,0x0,0x0,0xc0000000,0xc0000000,0x0,0x0,0x0,0x1000000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x38000,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x3c000,0x0,0x0,0x7e0,0x7e0,0x1000,0x1000,0x81b,0x81b,0x4,0x7e000,};
	}

  /** Constructor with InputStream. */
  public AnalisadorLexico(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AnalisadorLexico(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new AnalisadorLexicoTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AnalisadorLexico(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new AnalisadorLexicoTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new AnalisadorLexicoTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AnalisadorLexico(AnalisadorLexicoTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalisadorLexicoTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[63];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 23; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 63; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
